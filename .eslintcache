[{"/Users/hadi/Documents/dev/nachi/repos/nachos/src/index.js":"1","/Users/hadi/Documents/dev/nachi/repos/nachos/src/pages/Home.jsx":"2","/Users/hadi/Documents/dev/nachi/repos/nachos/src/pages/Coding.jsx":"3"},{"size":165,"mtime":1654842368072,"results":"4","hashOfConfig":"5"},{"size":245,"mtime":1654842368074,"results":"6","hashOfConfig":"5"},{"size":2258,"mtime":1654842368073,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"espvpi",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},"/Users/hadi/Documents/dev/nachi/repos/nachos/src/index.js",[],"/Users/hadi/Documents/dev/nachi/repos/nachos/src/pages/Home.jsx",[],["16","17"],"/Users/hadi/Documents/dev/nachi/repos/nachos/src/pages/Coding.jsx",["18","19","20","21","22","23"],"import React from 'react';\nimport Split from \"react-split\";\nimport { Link } from \"react-router-dom\";\n\nimport Blockly from 'blockly/core';\nimport BlocklyJS from 'blockly/javascript';\n\nimport BlocklyComponent from './MyBlockly/BlocklyComponent';\nimport { InitBlocks, MyBlocks } from './MyBlockly/Blocks/Blocks';\nimport NachosGenerator from './MyBlockly/Blocks/usedBlocks/nachosBlocks';\n\nimport '../css/Coding.css';\n\n\nclass MyBlockly extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.simpleWorkspace = React.createRef();\n\t}\n\n\tgenerateCode = () => {\n        let code;\n\n        try {\n            code = NachosGenerator.workspaceToCode(this.simpleWorkspace.current.workspace)\n        }\n        catch(error) {\n            code = \"Oops... <br>Here is the Error: <br>\" + error;\n        }\n\t\t// var code = BlocklyJS.workspaceToCode(this.simpleWorkspace.current.workspace);\n\t\t// console.log(code);\n\t\t// alert(code);\n        if (code)   document.getElementById(\"code_output\").innerHTML = code;\n        else        document.getElementById(\"code_output\").innerHTML = \"But... <br>There is nothing in the workspace... O_O\";\n\t}\n\n    save = () => {\n        if (typeof(Storage) !== \"undefined\") {\n            var xml = Blockly.Xml.workspaceToDom(this.simpleWorkspace.current.workspace);\n            localStorage.setItem(\"saved_blocks\", Blockly.Xml.domToText(xml));\n            console.log(\"Workspace Saved.\");\n            this.simpleWorkspace.current.workspace.clear();\n        } \n        else {\n            alert(\"Couldn't save workspace, due to your browser being OLD. (i.e. No Support for Web Storage API)\")\n        }\n    }\n\n    restore = () => {\n        if (typeof(Storage) !== \"undefined\") {\n            const saved_xml = localStorage.getItem(\"saved_blocks\");\n            if (saved_xml != null) {\n                this.simpleWorkspace.current.workspace.clear();\n                var xml = Blockly.Xml.textToDom(saved_xml)\n                Blockly.Xml.domToWorkspace(this.simpleWorkspace.current.workspace, xml)\n                console.log(\"Workspace Restored.\")\n            }\n            else {\n                alert(\"No saved workspace.\")\n            }\n        } \n        else {\n            alert(\"Couldn't save workspace, due to your browser being OLD. (i.e. No Support for Web Storage API)\")\n        }\n    }\n\n\n    clear = () => {\n        this.simpleWorkspace.current.workspace.clear();\n    }\n\n\trender() {\n\t\treturn (\n            <>\n                <nav id='menu' className='navbar navbar-default'>\n                    <div className='container'>\n                        <div className='navbar-header'>\n                            <Link to=\"/\" className=\"navbar-brand\">Nachos</Link>\n                        </div>\n                        <div className='collapse navbar-collapse' id='nachos-navbar'>\n                            <ul className='nav navbar-nav navbar-right'>\n                                <li><Link to=\"/\">Docs</Link></li>\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n                <nav id='menu2' className='navbar navbar-default'>\n                    <div className='container'>\n                        <div className='collapse navbar-collapse' id='nachos-navbar'>\n                            <ul className='nav navbar-nav navbar-left'>\n                                <li><a style={{cursor: \"e-resize\"}}>Workspace:</a></li>\n                                <li><a onClick={this.save}>&lt; Save &gt;</a></li>\n                                <li><a onClick={this.restore}>&lt; Restore &gt;</a></li>\n                                <li><a onClick={this.clear}>&lt; Clear &gt;</a></li>\n                            </ul>\n                            <ul className='nav navbar-nav navbar-right'>\n                                <li><a onClick={this.generateCode}>&lt; Generate Code &gt;</a></li>\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n                <Split \n                    className=\"split\" \n                    direction=\"horizontal\" \n                    minSize={0} gutterSize={11} \n                    snapOffset={50} \n                    sizes={[57, 43]}\n                    dragInterval={10}\n                >\n                    <div className=\"left-box\">\n                        <div className=\"rotated\"> <h3>Expanding...</h3> </div>\n                        <BlocklyComponent \n                            ref={this.simpleWorkspace}\n                            readOnly={false} trashcan={true} media={'media/'}\n                            move={{scrollbars: true, drag: true, wheel: true}}\n                            grid={{spacing: 20, length: 4, colour: \"#ccc\", snap: false}}\n                            comments={true}\n                            zoom={{controls: true}}\n                            // initialXml={`<xml xmlns=\"http://www.w3.org/1999/xhtml\"> <block type=\"controls_if\" x=\"20\" y=\"20\"></block> </xml>`}\n                            initialXml={InitBlocks()}\n                        >\n                            <MyBlocks />\n                        </BlocklyComponent>\n                    </div>\n\n                    <div className=\"right-box\">\n                        <pre id='code_output'>Click on &lt;Generate Code&gt;</pre>\n                    </div>\n                </Split>\n            </>\n\t\t);\n\t}\n}\n\nexport default MyBlockly;\n\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":6,"column":8,"nodeType":"30","messageId":"31","endLine":6,"endColumn":17},{"ruleId":"32","severity":1,"message":"33","line":91,"column":37,"nodeType":"34","endLine":91,"endColumn":69},{"ruleId":"32","severity":1,"message":"33","line":92,"column":37,"nodeType":"34","endLine":92,"endColumn":60},{"ruleId":"32","severity":1,"message":"33","line":93,"column":37,"nodeType":"34","endLine":93,"endColumn":63},{"ruleId":"32","severity":1,"message":"33","line":94,"column":37,"nodeType":"34","endLine":94,"endColumn":61},{"ruleId":"32","severity":1,"message":"33","line":97,"column":37,"nodeType":"34","endLine":97,"endColumn":68},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'BlocklyJS' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]